# 1、配置端口
server.port=8085

## 2、配置数据源【改用中间价】
#spring.application.name=jackAdvanced
#spring.datasource.url=jdbc:mysql://121.4.221.119:3306/jackAdvanced?allowMultiQueries=true&useUnicode=true&characterEncoding=UTF8&zeroDateTimeBehavior=convertToNull&useSSL=false
#spring.datasource.username=root
#spring.datasource.password=123456
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.druid.filters=stat
#spring.datasource.druid.maxActive=20
#spring.datasource.druid.initialSize=1
#spring.datasource.druid.maxWait=60000
#spring.datasource.druid.minIdle=1
#spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
#spring.datasource.druid.minEvictableIdleTimeMillis=300000
#spring.datasource.druid.validationQuery=select '1'
#spring.datasource.druid.testWhileIdle=true
#spring.datasource.druid.testOnBorrow=false
#spring.datasource.druid.testOnReturn=false
#spring.datasource.druid.poolPreparedStatements=true
#spring.datasource.druid.maxOpenPreparedStatements=20

# 3、配置rabbitmq
spring.rabbitmq.host=121.4.221.119
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
# 发送者开启 confirm 确认机制
spring.rabbitmq.publisher-confirm=true
# 发送者开启 return 确认机制
spring.rabbitmq.publisher-returns=true
# 设置消费端手动 ack
spring.rabbitmq.listener.simple.acknowledge-mode=manual
# 是否支持重试
spring.rabbitmq.listener.simple.retry.enabled=true

# 4、配置redis
# 【方式一】 redis配置 Jedis在实现上是直连Redis服务，多线程环境下非线程安全，除非使用连接池，为每个 RedisConnection 实例增加物理连接。
#redis.host=121.4.221.119
#redis.port=6378
#redis.timeout=300ms
#redis.password=root
#redis.database=0
# 【方式二】Lettuce是一种可伸缩，线程安全，完全非阻塞的Redis客户端，多个线程可以共享一个RedisConnection，它利用Netty NIO框架来高效地管理多个连接，从而提供了异步和同步数据访问方式，用于构建非阻塞的反应性应用程序。
spring.redis.host=121.4.221.119
spring.redis.database=0
spring.redis.port=6379
spring.redis.password=
# 连接池最大连接数
spring.redis.lettuce.pool.max-active=8
# 连接池最大空闲连接数
spring.redis.lettuce.pool.max-idle=8
# 连接池最小空闲连接数
spring.redis.lettuce.pool.min-idle=0
#连接池最大阻塞等待时间，负值表示没有限制
spring.redis.lettuce.pool.max-wait=-1ms



